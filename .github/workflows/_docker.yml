name: Docker

on:
  workflow_call:
    inputs:
      image-prefix:
        required: false
        type: string
        default: surrealdb
      # i.e. nightly, 1.0.0
      tag-prefix:
        required: true
        type: string
      publish:
        required: false
        type: boolean
        default: false
      # Use it when a new release is pushed. Not for nightly builds.
      update-latest:
        required: false
        type: boolean
        default: false
    secrets:
      DOCKER_USER:
        required: false
      DOCKER_PASS:
        required: false
  push:
    branches:
      - main
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  docker:
    name: ${{ matrix.job-name }}
    runs-on: ubuntu-latest
    env:
      docker-tag-current: surrealdb/${{ inputs.image-prefix }}${{ matrix.image-suffix }}:${{ inputs.tag-prefix }}${{ matrix.tag-suffix }}
      docker-tag-latest: surrealdb/${{ inputs.image-prefix }}${{ matrix.image-suffix }}:latest${{ matrix.tag-suffix }}
    strategy:
      fail-fast: false
      matrix:
        include:
          ########################################
          # Base images
          ########################################
          # Prod AMD64 image
          - job-name: Base Prod AMD64
            dockerfile: docker/Dockerfile
            build-target: prod
            platform: linux/amd64
          # Prod ARM64 image
          - job-name: Base Prod ARM64
            dockerfile: docker/Dockerfile
            build-target: prod
            platform: linux/arm64
          # Dev AMD64 image
          - job-name: Base Dev AMD64
            tag-suffix: -dev
            dockerfile: docker/Dockerfile
            build-target: dev
            platform: linux/amd64
          # Dev ARM64 image
          - job-name: Base Dev ARM64
            tag-suffix: -dev
            dockerfile: docker/Dockerfile
            build-target: dev
            platform: linux/arm64

          ########################################
          # FoundationDB images (FDB client library is only available for amd64)
          ########################################
          # Prod AMD64 image
          - job-name: FDB Prod AMD64
            image-suffix: -fdb
            dockerfile: docker/Dockerfile.fdb
            build-target: prod
            platform: linux/amd64
          # Dev AMD64 image
          - job-name: FDB Dev AMD64
            image-suffix: -fdb
            tag-suffix: -dev
            dockerfile: docker/Dockerfile.fdb
            build-target: dev
            platform: linux/amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure DockerHub
        uses: docker/login-action@v2
        if: ${{ inputs.publish == 'true' }}
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build the Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          target: ${{ matrix.build-target }}
          platforms: ${{ matrix.platform }}
          tags: ${{ env.docker-tag-current }}

      # Start the docker image as server and wait until it is ready
      - name: Test the Docker image
        run: |
          docker run --net=host --rm ${{ env.docker-tag-current }} start 2>&1 >surreal.log &

          retries=5
          until docker run --net=host --rm ${{ env.docker-tag-current }} is-ready; do
            retries=$((retries-1))
            if [[ $retries -eq 0 ]]; then
              echo "###"
              echo "### The container is not ready after 5 seconds!"
              echo "###"
              cat surreal.log
              echo "###"
              echo "### ERROR: The docker image is not valid. Aborting."
              echo "###"
              exit 1
            fi
            sleep 1
          done

      # This second build reuses the cache from the build above
      - name: Push the Docker image
        uses: docker/build-push-action@v4
        if: ${{ inputs.publish == 'true' }}
        with:
          context: .
          push: true
          target: ${{ matrix.build-target }}
          platforms: ${{ matrix.platform }}
          tags: ${{ env.docker-tag-current }}
      
      # Push the prod image as latest if this workflow is meant to update the latest tag
      - name: Push the Docker image and tag it as latest
        uses: docker/build-push-action@v4
        if: ${{ inputs.publish == 'true' && inputs.update-latest == 'true' }}
        with:
          context: .
          push: true
          target: ${{ matrix.build-target }}
          platforms: ${{ matrix.platform }}
          tags: ${{ env.docker-tag-latest }}
